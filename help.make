#
# Copyright (C) 2020 Jan Nowotsch
# Author Jan Nowotsch	<jan.nowotsch@gmail.com>
#
# Released under the terms of the GNU GPL v2.0
#



# help for the build system
help-buildsys:
	$(printf) "   "$(call term_mode,bold underline,"top-level Makefile syntax")"\n"
	$(printf) "\n"
	$(printf) "     "$(call term_mode,bold,"required variables")"\n"
	$(printf) "         %25s\t%s\n" "project_type" "define the type of the project [c|cxx]"
	$(printf) "         %25s\t%s\n" "scripts_dir" "directory containing the build system scripts"
	$(printf) "         %25s\t%s\n" "default_build_tree" "default target directory for builds, if not defined through BUILD_TREE"
	$(printf) "         %25s\t%s\n" "src_dirs" "list of space-separated directories used for the project sources"
	$(printf) "         %25s\t%s\n" "use_config_sys" "define whether to use the config system [y|n]"
	$(printf) "         %25s\t%s\n" "config_ftype" "name of configure files, e.g. Pconfig, only required if 'use_config_sys' is set to 'y'"
	$(printf) "         %25s\t%s\n" "config" "name of the project configuration, e.g. .config, only required if 'use_config_sys' is set to 'y'"
	$(printf) "\n"
	$(printf) "     "$(call term_mode,bold,"optional variables")"\n"
	$(printf) "         %25s\t%s\n" "config_tree" "directory containing project configurations, used with 'defconfig-*' targets"
	$(printf) "         %25s\t%s\n" "githooks_tree" "directory containing git hooks"
	$(printf) "         %25s\t%s\n" "use_coverage_sys" "enable the code coverage target"
	$(printf) "         %25s\t%s\n" "gcovered_rc" "the rc-file to be used during code coverage analysis for gcovered"
	$(printf) "         %25s\t%s\n" "tool_deps" "list of space-separated tools that are required to properly execute the project"
	$(printf) "\n\n"
	$(printf) "   "$(call term_mode,bold underline,"sub-directory Makefile syntax")"\n"
	$(printf) "\n"
	$(printf) "      "$(call term_mode,bold,"defining build targets")"\n"
	$(printf) "         %25s\t%s\n" "[host]obj-y" "define target object files, also combined into ./obj.o"
	$(printf) "         %25s\t%s\n" "[host]lib-y" "define target libraries"
	$(printf) "         %25s\t%s\n" "[host]bin-y" "define target binaries"
	$(printf) "         %25s\t%s\n" "<target>-y" "specify the objects required to build the compound object <target>"
	$(printf) "\n"
	$(printf) "             - prefixed \"host\" indicates to use host compiler tools\n"
	$(printf) "             - [host]obj-y can take a directory as \"obj-y := <dir>/\"\n"
	$(printf) "                  this builds <dir>/obj.o and adds <dir>/ to subdir-y\n"
	$(printf) "\n"
	$(printf) "      "$(call term_mode,bold,"defining sub-directories")"\n"
	$(printf) "         %25s\t%s\n" "subdir-y" "define sub-directories to include"
	$(printf) "\n"
	$(printf) "      "$(call term_mode,bold,"defining flags")"\n"
	$(printf) "         %25s\t%s\n" "[host]<flag>-y" "specified flags apply to  all targets within the current directory"
	$(printf) "         %25s\t%s\n" "<target>-[host]<flag>[-y]" "specified flags only apply to <target>"
	$(printf) "         %25s\t%s\n" "subdir-[host]<flag>[-y]" "specified flags apply to all sub-directories"
	$(printf) "         %25s\t%s\n" "<subdir>-[host]<flag>]-y]" "specified flags only apply to <subdir>"
	$(printf) "\n"
	$(printf) "         "$(call term_mode,bold,"%15s")"\n" "<flag>"
	$(printf) "         %25s\t%s\n" "cflags" "c compiler flags"
	$(printf) "         %25s\t%s\n" "cxxflags" "c++ compiler flags"
	$(printf) "         %25s\t%s\n" "cppflags" "c pre-processor flags"
	$(printf) "         %25s\t%s\n" "asflags" "assembler flags"
	$(printf) "         %25s\t%s\n" "ldflags" "linker flags"
	$(printf) "         %25s\t%s\n" "ldlibs" "compiler flags when it is supposed to invoke the linker"
	$(printf) "         %25s\t%s\n" "archflags" "architecture specific flags"
	$(printf) "         %25s\t%s\n" "yaccflags" "yacc flags"
	$(printf) "         %25s\t%s\n" "lexflags" "lex flags"
	$(printf) "         %25s\t%s\n" "gperfflags" "gperf flags"
	$(printf) "\n"
	$(printf) "      "$(call term_mode,bold,"usable variables")"\n"
	$(printf) "         %25s\t%s\n" "src_tree" "source tree root"
	$(printf) "         %25s\t%s\n" "loc_src_tree" "the current directory"
	$(printf) "         %25s\t%s\n" "build_tree" "build tree root"
	$(printf) "         %25s\t%s\n" "loc_build_tree" "build tree for the current directory"
	$(printf) "\n\n"
	$(printf) "   "$(call term_mode,bold underline,"menvironment variables")"\n"
	$(printf) "\n"
	$(printf) "         %25s\t%s\n" "V" "change verbosity, default = 0"
	$(printf) "         %25s\t%s\n" "WHATCHANGED" "if set compile commands will indicate why they are rebuild"
	$(printf) "         %25s\t%s\n" "BUILD_TREE" "define output directory"
	$(printf) "         %25s\t%s\n" "SRC_TREE" "define source directory"
	$(printf) "\n"
	$(printf) "         %25s\t%s\n" "[HOST]CC"
	$(printf) "         %25s\t%s\n" "[HOST]CXX"
	$(printf) "         %25s\t%s\n" "[HOST]AS"
	$(printf) "         %25s\t%s\n" "[HOST]LD"
	$(printf) "         %25s\t%s\n" "[HOST]AR"
	$(printf) "         %25s\t%s\n" "LEX"
	$(printf) "         %25s\t%s\n" "YACC"
	$(printf) "         %25s\t%s\n" "GPERF"
	$(printf) "\n"
	$(printf) "         %25s\t%s\n" "[HOST]CFLAGS"
	$(printf) "         %25s\t%s\n" "[HOST]CXXFLAGS"
	$(printf) "         %25s\t%s\n" "[HOST]CPPFLAGS"
	$(printf) "         %25s\t%s\n" "[HOST]LDFLAGS"
	$(printf) "         %25s\t%s\n" "[HOST]LDLIBS"
	$(printf) "         %25s\t%s\n" "[HOST]ASFLAGS"
	$(printf) "         %25s\t%s\n" "[HOST]ARCHFLAGS"
	$(printf) "         %25s\t%s\n" "LEXFLAGS"
	$(printf) "         %25s\t%s\n" "YACCFLAGS"
	$(printf) "         %25s\t%s\n" "GPERFFLAGS"
	$(printf) "\n\n"
	$(printf) "   "$(call term_mode,bold underline,"special targets")"\n"
	$(printf) "\n"
	$(printf) "         %25s\t%s\n" "<path>/<target>.i" "build pre-processed target file"
	$(printf) "         %25s\t%s\n" "<path>/<target>.S" "build assembly target file"
	$(printf) "\n"
	$(printf) "         %25s\t%s\n" "menuconfig" "graphical configuration"
	$(printf) "         %25s\t%s\n" "defconfig-*" "apply default configuration, requires the 'config_tree' variable"
	$(printf) "\n"
	$(printf) "         %25s\t%s\n" "test" "run all executable direct depencies"
	$(printf) "         %25s\t%s\n" "coverage" "code coverage evaluation based on the test target"
	$(printf) "\n"
	$(printf) "         %25s\t%s\n" "check_build_tools" "test if all build tools are available"
	$(printf) "         %25s\t%s\n" "check_user_tools" "test if all externally required tools, define in 'tool_deps', are available"
	$(printf) "         %25s\t%s\n" "check_config" "test if the config file defined in 'config' is accessible"
